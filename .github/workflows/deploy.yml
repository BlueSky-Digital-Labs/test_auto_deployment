name: Build and Deploy to AWS

on:
  push:
    branches:
      - main  # Adjust this as needed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up AWS CLI
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      # Step 3: Log in to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com

      # Step 4: Build, tag, and push the Django image
      - name: Build, Tag, and Push Django Image
        run: |
          docker build -t prototype-backend ./backend
          docker tag prototype-backend:latest 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/my-django-app:latest
          docker push 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/my-django-app:latest

      # Step 5: Build, tag, and push the React image
      - name: Build, Tag, and Push React Image
        run: |
          docker build -t prototype-frontend ./frontend
          docker tag prototype-frontend:latest 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/my-react-app:latest
          docker push 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/my-react-app:latest

      # Step 6: Deploy to ECS
      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service --cluster my-cluster --service my-django-service --force-new-deployment
          aws ecs update-service --cluster my-cluster --service my-react-service --force-new-deployment