name: Build, Register, and Deploy to AWS ECS

on:
  push:
    branches:
      - main  # Adjust this as needed

jobs:
  build-register-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      - name: Find Modified Directories
        id: check_changes
        run: |
          # Fetch the latest commit
          git fetch origin main
          changed_dirs=""

          # Loop through all directories starting with "client"
          for dir in client*; do
            if [ -d "$dir" ]; then  # Check if directory exists
              if git diff --quiet HEAD^ HEAD -- "$dir"; then
                echo "$dir was not changed"
              else
                echo "$dir was changed"
                changed_dirs="$dir"
              fi
            fi
          done

          echo "CHANGED_DIRS=$changed_dirs" >> $GITHUB_ENV

      - name: Output Changed Directories
        run: | 
          echo "Changed directories: ${{ env.CHANGED_DIRS }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Check if ECR Repository Exists and Create if Not
        id: create_ecr_repo_backend
        shell: bash
        run: |
          REPO_NAME="${{ env.CHANGED_DIRS }}-django-app"  # Replace with your desired repository name
          REGION="ap-southeast-2"  # Default region if not set in secrets

          # Check if the repository exists
          EXISTING_REPO=$(aws ecr describe-repositories --repository-names "$REPO_NAME" --query "repositories[0].repositoryName" --output text 2>/dev/null || true)

          if [ "$EXISTING_REPO" != "$REPO_NAME" ]; then
            echo "Repository '$REPO_NAME' does not exist. Creating..."
            aws ecr create-repository --repository-name "$REPO_NAME"
            echo "Repository '$REPO_NAME' created successfully."
          else
            echo "Repository '$REPO_NAME' already exists."
          fi

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com
      
      - name: Build, Tag, and Push Django Image
        run: |
          echo "Building Django image..."
          docker build -t prototype-backend ./${{ env.CHANGED_DIRS }}/backend
          docker tag prototype-backend:latest 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-django-app:latest
          echo "Pushing Django image to ECR..."
          docker push 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-django-app:latest

      - name: Check if ECR Repository Exists and Create if Not
        id: create_ecr_repo_frontend
        shell: bash
        run: |
          REPO_NAME="${{ env.CHANGED_DIRS }}-react-app"  # Replace with your desired repository name
          REGION="ap-southeast-2"  # Default region if not set in secrets

          # Check if the repository exists
          EXISTING_REPO=$(aws ecr describe-repositories --repository-names "$REPO_NAME" --query "repositories[0].repositoryName" --output text 2>/dev/null || true)

          if [ "$EXISTING_REPO" != "$REPO_NAME" ]; then
            echo "Repository '$REPO_NAME' does not exist. Creating..."
            aws ecr create-repository --repository-name "$REPO_NAME"
            echo "Repository '$REPO_NAME' created successfully."
          else
            echo "Repository '$REPO_NAME' already exists."
          fi

      - name: Build, Tag, and Push React Image
        run: |
          echo "Building React image..."
          docker build -t prototype-frontend ./${{ env.CHANGED_DIRS }}/frontend
          docker tag prototype-frontend:latest 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-react-app:latest
          echo "Pushing React image to ECR..."
          docker push 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-react-app:latest

      - name: Check if ECS Cluster exists and create if not
        id: check-cluster
        run: |
          CLUSTER_NAME="${{ env.CHANGED_DIRS }}-cluster"
          if aws ecs describe-clusters --clusters $CLUSTER_NAME --query "clusters[?status == 'ACTIVE'].clusterName" --output text | grep -q $CLUSTER_NAME; then
            echo "Cluster $CLUSTER_NAME already exists."
          else
            echo "Creating ECS Cluster $CLUSTER_NAME..."
            aws ecs create-cluster --cluster-name $CLUSTER_NAME
            echo "Cluster $CLUSTER_NAME created."
          fi

      - name: Register ECS Task Definition for NGINX
        id: register-task
        run: |
          TASK_DEFINITION_JSON=$(cat <<EOF
          {
            "family": "nginx-task",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "react",
                "image": "128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-react-app:latest",
                "memory": 512,
                "cpu": 256,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 80,
                    "protocol": "tcp"
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          )
          echo "$TASK_DEFINITION_JSON" > task-definition.json
          aws ecs register-task-definition --cli-input-json file://task-definition.json

      - name: Create ECS Service for NGINX
        run: |
          CLUSTER_NAME="${{ env.CHANGED_DIRS }}-cluster"
          SERVICE_NAME="${{ env.CHANGED_DIRS }}-service"
          SUBNET_ID="subnet-aff804e7"  # Replace with your actual subnet ID
          SECURITY_GROUP_ID="sg-6fdda027"  # Replace with your actual security group ID

          # Check if the service already exists
          if aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[?status == 'ACTIVE'].serviceName" --output text | grep -q $SERVICE_NAME; then
            echo "Service $SERVICE_NAME already exists."
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --force-new-deployment
            echo "Service $SERVICE_NAME updated and restarted."
          else
            echo "Creating ECS Service $SERVICE_NAME..."
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition nginx-task \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}"
            echo "Service $SERVICE_NAME created."
          fi

      - name: Output public IP 
        run: |
          CLUSTER_NAME="${{ env.CHANGED_DIRS }}-cluster"
          aws ecs list-tasks --cluster $CLUSTER_NAME --service-name nginx-service --query "taskArns[0]" --output text | xargs -I {} aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks {} --query "tasks[0].attachments[0].details[?name=='publicIPAddress'].value" --output text