name: Build, Register, and Deploy to AWS ECS

on:
  push:
    branches:
      - main  # Adjust this as needed

jobs:
  build-register-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 5

      - name: Find Modified Directories
        id: check_changes
        run: |
          # Fetch the latest commit
          git fetch origin main
          changed_dirs=""

          # Loop through all directories starting with "client"
          for dir in client*; do
            if [ -d "$dir" ]; then  # Check if directory exists
              if git diff --quiet HEAD^ HEAD -- "$dir"; then
                echo "$dir was not changed"
              else
                echo "$dir was changed"
                changed_dirs="$dir"
              fi
            fi
          done

          echo "CHANGED_DIRS=$changed_dirs" >> $GITHUB_ENV

      - name: Output Changed Directories
        run: | 
          echo "Changed directories: ${{ env.CHANGED_DIRS }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Check if ECR Repository Exists and Create if Not
        id: create_ecr_repo_backend
        shell: bash
        run: |
          REPO_NAME="${{ env.CHANGED_DIRS }}-django-app"  # Replace with your desired repository name
          REGION="ap-southeast-2"  # Default region if not set in secrets

          # Check if the repository exists
          EXISTING_REPO=$(aws ecr describe-repositories --repository-names "$REPO_NAME" --query "repositories[0].repositoryName" --output text 2>/dev/null || true)

          if [ "$EXISTING_REPO" != "$REPO_NAME" ]; then
            echo "Repository '$REPO_NAME' does not exist. Creating..."
            aws ecr create-repository --repository-name "$REPO_NAME"
            echo "Repository '$REPO_NAME' created successfully."
          else
            echo "Repository '$REPO_NAME' already exists."
          fi

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com
      
      # - name: Build, Tag, and Push Django Image
      #   run: |
      #     echo "Building Django image..."
      #     docker build -t prototype-backend ./${{ env.CHANGED_DIRS }}/backend
      #     docker tag prototype-backend:latest 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-django-app:latest
      #     echo "Pushing Django image to ECR..."
      #     docker push 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-django-app:latest

      - name: Check if ECR Repository Exists and Create if Not
        id: create_ecr_repo_frontend
        shell: bash
        run: |
          REPO_NAME="${{ env.CHANGED_DIRS }}-react-app"  # Replace with your desired repository name
          REGION="ap-southeast-2"  # Default region if not set in secrets

          # Check if the repository exists
          EXISTING_REPO=$(aws ecr describe-repositories --repository-names "$REPO_NAME" --query "repositories[0].repositoryName" --output text 2>/dev/null || true)

          if [ "$EXISTING_REPO" != "$REPO_NAME" ]; then
            echo "Repository '$REPO_NAME' does not exist. Creating..."
            aws ecr create-repository --repository-name "$REPO_NAME"
            echo "Repository '$REPO_NAME' created successfully."
          else
            echo "Repository '$REPO_NAME' already exists."
          fi

      # - name: Build, Tag, and Push React Image
      #   run: |
      #     echo "Building React image..."
      #     docker build -t prototype-frontend ./${{ env.CHANGED_DIRS }}/frontend
      #     docker tag prototype-frontend:latest 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-react-app:latest
      #     echo "Pushing React image to ECR..."
      #     docker push 128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-react-app:latest

      - name: Allocate Elastic IP if not exists For Frontend
        id: allocate-eip-frontend
        run: |
          EIP_TAG="${{ env.CHANGED_DIRS }}-ecs-eip"
          EXISTING_EIP_ALLOCATION_ID=$(aws ec2 describe-addresses --filters "Name=tag:Name,Values=$EIP_TAG" --query "Addresses[0].AllocationId" --output text)
          
          if [ "$EXISTING_EIP_ALLOCATION_ID" == "None" ]; then
            echo "Allocating new Elastic IP..."
            NEW_EIP_ALLOCATION_ID=$(aws ec2 allocate-address --query "AllocationId" --output text)
            aws ec2 create-tags --resources "$NEW_EIP_ALLOCATION_ID" --tags Key=Name,Value=$EIP_TAG
            echo "Allocated Elastic IP with Allocation ID: $NEW_EIP_ALLOCATION_ID"
            echo "::set-output name=eip_allocation_id::$NEW_EIP_ALLOCATION_ID"
          else
            echo "Elastic IP already exists with Allocation ID: $EXISTING_EIP_ALLOCATION_ID"
            echo "::set-output name=eip_allocation_id::$EXISTING_EIP_ALLOCATION_ID"
          fi

      - name: Allocate Elastic IP if not exists For Frontend
        id: frontend-interface
        run: |
          SUBNET_ID="subnet-aff804e7"
          SECURITY_GROUP_ID="sg-6fdda027"  

          ENI_ID=$(aws ec2 create-network-interface \
            --subnet-id $SUBNET_ID \
            --groups $SECURITY_GROUP_ID \
            --query 'NetworkInterface.NetworkInterfaceId' \
            --output text)

          PRIVATE_IP_ADDRESS=$(aws ec2 describe-network-interfaces \
            --network-interface-ids $ENI_ID \
            --query 'NetworkInterfaces[0].PrivateIpAddresses[0].PrivateIpAddress' \
            --output text)

          aws ec2 associate-address \
            --allocation-id ${{ steps.allocate-eip-frontend.outputs.eip_allocation_id }} \
            --network-interface-id $ENI_ID \
            --private-ip-address $PRIVATE_IP_ADDRESS

      # - name: Create NLB and associate Elastic IP
      #   run: |
      #     NLB_NAME="${{ env.CHANGED_DIRS }}-ecs-nlb"
      #     SUBNETS="subnet-aff804e7" 
      #     EIP_ALLOCATION_ID="${{ steps.allocate-eip-frontend.outputs.eip_allocation_id }}"

      #     # Check if NLB already exists
      #     NLB_ARN=$(aws elbv2 describe-load-balancers --names "$NLB_NAME" --query "LoadBalancers[0].LoadBalancerArn" --output text 2>/dev/null || echo "None")
      #     if [ "$NLB_ARN" == "None" ]; then
      #       echo "Creating NLB $NLB_NAME..."
      #       NLB_ARN=$(aws elbv2 create-load-balancer \
      #         --name $NLB_NAME \
      #         --subnets $SUBNETS \
      #         --type network \
      #         --scheme internet-facing \
      #         --ip-address-type ipv4 \
      #         --query "LoadBalancers[0].LoadBalancerArn" \
      #         --output text)
      #       echo "NLB created with ARN: $NLB_ARN"
      #     else
      #       echo "NLB $NLB_NAME already exists with ARN: $NLB_ARN"
      #     fi

      #     echo "Associate Elastic IP with NLB's primary network interface"
      #     NLB_ENI=$(aws ec2 describe-network-interfaces --filters "Name=description,Values=*Network Load Balancer $NLB_NAME*" --query "NetworkInterfaces[0].NetworkInterfaceId" --output text)
      #     aws ec2 associate-address --allocation-id "$EIP_ALLOCATION_ID" --network-interface-id "$NLB_ENI"
      #     echo "Elastic IP associated with NLB ENI $NLB_ENI."

      # - name: Fetch Load Balancer and Target Group Details
      #   id: fetch-lb-details
      #   run: |
      #     NLB_NAME="${{ env.CHANGED_DIRS }}-ecs-nlb"
      #     TARGET_GROUP_NAME="ecs-target-group"
      
      #     # Fetch Load Balancer ARN
      #     LOAD_BALANCER_ARN=$(aws elbv2 describe-load-balancers \
      #         --names "$NLB_NAME" \
      #         --query "LoadBalancers[0].LoadBalancerArn" \
      #         --output text)
      #     echo "Load Balancer ARN: $LOAD_BALANCER_ARN"
      #     echo "::set-output name=load_balancer_arn::$LOAD_BALANCER_ARN"
      
      #     # Fetch Target Group ARN
      #     TARGET_GROUP_ARN=$(aws elbv2 describe-target-groups \
      #         --names "$TARGET_GROUP_NAME" \
      #         --query "TargetGroups[0].TargetGroupArn" \
      #         --output text)
      #     echo "Target Group ARN: $TARGET_GROUP_ARN"
      #     echo "::set-output name=target_group_arn::$TARGET_GROUP_ARN"

      - name: Check if ECS Cluster exists and create if not
        id: check-cluster
        run: |
          CLUSTER_NAME="${{ env.CHANGED_DIRS }}-cluster"
          if aws ecs describe-clusters --clusters $CLUSTER_NAME --query "clusters[?status == 'ACTIVE'].clusterName" --output text | grep -q $CLUSTER_NAME; then
            echo "Cluster $CLUSTER_NAME already exists."
          else
            echo "Creating ECS Cluster $CLUSTER_NAME..."
            aws ecs create-cluster --cluster-name $CLUSTER_NAME
            echo "Cluster $CLUSTER_NAME created."
          fi

      - name: Register ECS Task Definition for Frontend
        id: register-frontend-task
        run: |
          TASK_DEFINITION_NAME="${{ env.CHANGED_DIRS }}-frontend-task"
          EXECUTION_ROLE_ARN="arn:aws:iam::128363281216:role/ECS-to-ECR"
          TASK_DEFINITION_JSON=$(cat <<EOF
          {
            "family": "$TASK_DEFINITION_NAME",
            "networkMode": "awsvpc",
            "executionRoleArn": "$EXECUTION_ROLE_ARN",
            "containerDefinitions": [
              {
                "name": "react",
                "image": "128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-react-app:latest",
                "memory": 512,
                "cpu": 256,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000,
                    "protocol": "tcp"
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          )
          echo "$TASK_DEFINITION_JSON" > task-definition.json
          aws ecs register-task-definition --cli-input-json file://task-definition.json

      - name: Register or Update ECS Task Definition for Frontend
        id: register-task-1
        run: |
          TASK_DEFINITION_NAME="${{ env.CHANGED_DIRS }}-frontend-task"
          EXECUTION_ROLE_ARN="arn:aws:iam::128363281216:role/ECS-to-ECR"
          ECR_IMAGE_URI="128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-react-app:latest"

          # Check if task definition exists
          if aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME > /dev/null 2>&1; then
            echo "Task definition $TASK_DEFINITION_NAME exists. Registering new revision..."
            EXISTING_TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME)
            
            # Modify the task definition JSON
            UPDATED_TASK_DEF=$(echo "$EXISTING_TASK_DEF" | jq --arg image "$ECR_IMAGE_URI" --arg role "$EXECUTION_ROLE_ARN" \
              '.taskDefinition | {family, networkMode, containerDefinitions, requiresCompatibilities, cpu, memory} |
              .containerDefinitions[0].image = $image |
              .executionRoleArn = $role')

            # Register new revision
            echo "$UPDATED_TASK_DEF" > updated-task-def.json
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://updated-task-def.json --query "taskDefinition.taskDefinitionArn" --output text)
            echo "New Task Definition Revision ARN: $NEW_TASK_DEF_ARN"
          fi
          echo "new_task_definition_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Create ECS Service for Frontend
        run: |
          CLUSTER_NAME="${{ env.CHANGED_DIRS }}-cluster"
          SERVICE_NAME="frontend-service"
          SUBNET_ID="subnet-aff804e7"
          SECURITY_GROUP_ID="sg-6fdda027"  
          NEW_TASK_DEF_ARN=${{ env.new_task_definition_arn }}

          # Check if the service already exists
          if aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[?status == 'ACTIVE'].serviceName" --output text | grep -q $SERVICE_NAME; then
            echo "Service $SERVICE_NAME already exists."
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --task-definition $NEW_TASK_DEF_ARN \
              --force-new-deployment
            echo "Service $SERVICE_NAME updated and restarted."
          else
            echo "Creating ECS Service $SERVICE_NAME..."
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $NEW_TASK_DEF_ARN \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}"
            echo "Service $SERVICE_NAME created."
          fi
      
      - name: Register ECS Task Definition for Backend
        id: register-task
        run: |
          TASK_DEFINITION_NAME="${{ env.CHANGED_DIRS }}-backend-task"
          EXECUTION_ROLE_ARN="arn:aws:iam::128363281216:role/ECS-to-ECR"
          BACKEND_TASK_DEFINITION_JSON=$(cat <<EOF
          {
            "family": "$TASK_DEFINITION_NAME",
            "networkMode": "awsvpc",
            "executionRoleArn": "$EXECUTION_ROLE_ARN",
            "containerDefinitions": [
              {
                "name": "backend",
                "image": "128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-django-app:latest",
                "memory": 512,
                "cpu": 256,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 8000,
                    "hostPort": 8000,
                    "protocol": "tcp"
                  }
                ]
              }
            ],
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512"
          }
          EOF
          )
          echo "$BACKEND_TASK_DEFINITION_JSON" > task-definition.json
          aws ecs register-task-definition --cli-input-json file://task-definition.json
      
      - name: Register or Update ECS Task Definition for backend
        id: register-backend-task
        run: |
          TASK_DEFINITION_NAME="${{ env.CHANGED_DIRS }}-backend-task"
          EXECUTION_ROLE_ARN="arn:aws:iam::128363281216:role/ECS-to-ECR"
          ECR_IMAGE_URI="128363281216.dkr.ecr.ap-southeast-2.amazonaws.com/${{ env.CHANGED_DIRS }}-django-app:latest"

          # Check if task definition exists
          if aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME > /dev/null 2>&1; then
            echo "Task definition $TASK_DEFINITION_NAME exists. Registering new revision..."
            EXISTING_TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_NAME)
            
            # Modify the task definition JSON
            UPDATED_TASK_DEF=$(echo "$EXISTING_TASK_DEF" | jq --arg image "$ECR_IMAGE_URI" --arg role "$EXECUTION_ROLE_ARN" \
              '.taskDefinition | {family, networkMode, containerDefinitions, requiresCompatibilities, cpu, memory} |
              .containerDefinitions[0].image = $image |
              .executionRoleArn = $role')

            # Register new revision
            echo "$UPDATED_TASK_DEF" > updated-task-def.json
            NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://updated-task-def.json --query "taskDefinition.taskDefinitionArn" --output text)
            echo "New Task Definition Revision ARN: $NEW_TASK_DEF_ARN"
          fi
          echo "backend_new_task_definition_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Create ECS Service for Backend
        run: |
          CLUSTER_NAME="${{ env.CHANGED_DIRS }}-cluster"
          SERVICE_NAME="backend-service"
          SUBNET_ID="subnet-aff804e7"
          SECURITY_GROUP_ID="sg-6fdda027"  
          NEW_TASK_DEF_ARN=${{ env.backend_new_task_definition_arn }}

          # Check if the service already exists
          if aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query "services[?status == 'ACTIVE'].serviceName" --output text | grep -q $SERVICE_NAME; then
            echo "Service $SERVICE_NAME already exists."
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --task-definition $NEW_TASK_DEF_ARN \
              --force-new-deployment
            echo "Service $SERVICE_NAME updated and restarted."
          else
            echo "Creating ECS Service $SERVICE_NAME..."
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $NEW_TASK_DEF_ARN \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_ID],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}"
            echo "Service $SERVICE_NAME created."
          fi

      # - name: Output public IP 
      #   run: |
      #     CLUSTER_NAME="${{ env.CHANGED_DIRS }}-cluster"
      #     aws ecs list-tasks --cluster $CLUSTER_NAME --service-name nginx-service --query "taskArns[0]" --output text | xargs -I {} aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks {} --query "tasks[0].attachments[0].details[?name=='publicIPAddress'].value" --output text